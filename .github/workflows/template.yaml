name: Terraform Deployment with Sync (tflint)

on:
  push:
    branches:
      - none  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM, Webapp)'
        required: true

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/${{ github.event.inputs.resourcetype }}  # Correct working directory
      TF_VERSION: '1.3.5'  # Specify the Terraform version

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory (for debugging)
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE

    # Step 3: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 5: Install Sync (tflint) for security analysis
    - name: Install Sync (tflint)
      run: |
        echo "Installing Sync (tflint)..."
        
        # Download tflint binary
        curl -L -o tflint-linux-amd64.zip https://github.com/terraform-linters/tflint/releases/download/v0.34.0/tflint-linux-amd64.zip
        
        # Check if the download was successful
        if [ ! -f tflint-linux-amd64.zip ]; then
          echo "Failed to download tflint. Exiting."
          exit 1
        fi
        
        # Unzip tflint
        unzip tflint-linux-amd64.zip
        
        # Check if unzip was successful
        if [ ! -f tflint ]; then
          echo "Failed to extract tflint. Exiting."
          exit 1
        fi
        
        # Move tflint binary to the appropriate directory
        sudo mv tflint /usr/local/bin/tflint
        
        # Verify tflint installation
        tflint --version

    # Step 6: Run Sync (tflint) for Terraform code security analysis and save output to a file
    - name: Run Sync (tflint) on Terraform code
      run: |
        echo "Running Sync (tflint) for security analysis on Terraform configuration..."
        tflint --config=${{ env.TF_WORKING_DIR }}/.tflint.hcl --init  # Initialize Sync if needed
        tflint --config=${{ env.TF_WORKING_DIR }}/.tflint.hcl > ${{ github.workspace }}/sync_output.txt  # Save output to file

    # Step 7: Commit the Sync output to the repository (if desired)
    - name: Commit Sync Output
      run: |
        git config --global user.name "sivalakshmimettu"
        git config --global user.email "sivalakshmimettu@github.com"
        git add sync_output.txt
        git commit -m "Add Sync (tflint) output for Terraform security analysis"
        git status
        git log -n 1  # Check the last commit details

    # Step 8: Push the commit using GitHub token for authentication
    - name: Push Sync Output Commit
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GIT_PAT }}@github.com/${{ github.repository }}.git
        git push

    # Step 9: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate
