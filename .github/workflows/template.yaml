name: Terraform Deployment with Checkov

on:
  push:
    branches:
      - none  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM, Webapp)'
        required: true

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/${{ github.event.inputs.resourcetype }}  # Correct working directory
      TF_VERSION: '1.3.5'  # Specify the Terraform version
      BUILD_NUMBER: ${{ github.run_id }}  # Get the GitHub run ID as the build number

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory (for debugging)
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE

    # Step 3: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 5: Run Checkov for Terraform code security analysis
    - name: Run Checkov on Terraform code
      id: checkov
      run: |
        echo "Running Checkov for security analysis on Terraform configuration..."
        pip install checkov  # Install Checkov
        # Run Checkov and save output even if it fails
        checkov -d ${{ env.TF_WORKING_DIR }} -o json -o checkov_outputs/checkov_output_${{ env.BUILD_NUMBER }}.json || echo "Checkov failed, but output will be saved."

    # Step 6: Copy Checkov output to the repository even if Checkov fails
    - name: Copy Checkov output to the repository
      run: |
        echo "Copying Checkov output file to the repository..."
        
        # Dynamically set the file name based on the build number
        CHECKOV_OUTPUT_FILE="checkov_outputs/checkov_output_${{ env.BUILD_NUMBER }}.json"
        
        # Ensure the Checkov output file exists before adding it to Git
        if [ -f "$CHECKOV_OUTPUT_FILE" ]; then
          # Create the checkov_outputs directory if it doesn't exist
          mkdir -p checkov_outputs
          
          # Move the Checkov output file to the checkov_outputs directory
          mv "$CHECKOV_OUTPUT_FILE" "checkov_outputs/$CHECKOV_OUTPUT_FILE"
          
          # Add the output file to the Git repository
          git add "checkov_outputs/$CHECKOV_OUTPUT_FILE"
          
          # Commit the file to the repository
          git commit -m "Add Checkov output for build ${BUILD_NUMBER}"
          
          # Configure git to use the default GitHub Actions user
          git config --global user.email "sivalakshmimettu@github.com"
          git config --global user.name "sivalakshmimettu"
          
          # Push the changes back to the repository using the default GITHUB_TOKEN
          git push https://github.com/sivalakshmimettu/webapptest HEAD:refs/heads/main
        else
          echo "Checkov output file does not exist!"
          exit 1
        fi

    # Step 7: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate

    # Step 8: Terraform Plan with environment-specific variables
    - name: Terraform Plan
      run: |
        echo "Running Terraform Plan with environment-specific tfvars..."
        ENV_TFVARS="${{ github.event.inputs.resourcetype }}/terraform.tfvars"
        echo "Using environment-specific tfvars file: ${ENV_TFVARS}"
    
        # Run Terraform Plan with the correct path to tfvars file
        terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan -var-file=${{ github.workspace }}/${ENV_TFVARS}

    # Step 9: Remove terraform.lock.hcl file after applying (for clean-up)
    - name: Remove terraform.lock.hcl
      run: |
        echo "Removing terraform.lock.hcl after applying..."
        rm -f ${{ env.TF_WORKING_DIR }}/terraform.lock.hcl
