name: Terraform Deployment with Snyk

on:
  push:
    branches:
      - none  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM, Webapp)'
        required: true

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/${{ github.event.inputs.resourcetype }}  # Correct working directory
      TF_VERSION: '1.3.5'  # Specify the Terraform version

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory (for debugging)
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE

    # Step 3: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 4: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 5: Run Snyk for Terraform code security analysis and save output to a file
    - name: Run Snyk on Terraform code
      run: |
        echo "Running Snyk for security analysis on Terraform configuration..."
        npm install -g snyk  # Install Snyk CLI globally
        snyk test --all-projects --json | tee ${{ github.workspace }}/snyk_output.json  # Run Snyk test and save output to a JSON file

    # Step 6: Commit the Snyk output to the repository (if desired)
    - name: Commit Snyk Output
      run: |
        git config --global user.name "sivalakshmimettu"
        git config --global user.email "sivalakshmimettu@github.com"
        git add snyk_output.json
        git commit -m "Add Snyk output for Terraform security analysis"
        git status
        git log -n 1  # Check the last commit details

    # Step 7: Push the commit using GitHub token for authentication
    - name: Push Snyk Output Commit
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GIT_PAT }}@github.com/${{ github.repository }}.git
        git push

    # Step 8: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate
